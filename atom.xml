<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xlfan&#39;s blog</title>
  
  
  <link href="https://xielingfan.github.io/atom.xml" rel="self"/>
  
  <link href="https://xielingfan.github.io/"/>
  <updated>2022-04-28T04:26:13.713Z</updated>
  <id>https://xielingfan.github.io/</id>
  
  <author>
    <name>xlfan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>买卖股票问题</title>
    <link href="https://xielingfan.github.io/2022/04/28/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://xielingfan.github.io/2022/04/28/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-28T02:58:11.000Z</published>
    <updated>2022-04-28T04:26:13.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>长度为n的价格数组a，表示某只股票每天的价格， 每天最多买入或卖出该只股票的1手股票， 无手续费， 卖出前手中必须有股票， 持有股票数目不受限制， 初始资金为m元， 任意时刻都不能透支。 请问在n天结束后，拥有最大的总资产是多少？（总资产： 股票数目*股票价格+现金）</p><p><strong>输入</strong>：<br>第一行两个正整数n，m(1 &lt;&#x3D; n &lt;&#x3D; 2000, 1 &lt;&#x3D; m &lt;&#x3D; 10^9)<br>第二行n个正整数ai (1 &lt;&#x3D; ai &lt;&#x3D; 1^9)， ai表示股票在第i天的售价</p><p><strong>输出</strong>：<br>n天结束后，拥有最大的总资产</p><p><strong>示例1</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">6 2</span><br><span class="line">2 3 1 1 1 2</span><br><span class="line">输出：</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p><strong>示例2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">3 2</span><br><span class="line">114</span><br><span class="line">输出：</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>dp</p><p><strong>状态表示</strong>： f(i,j) &#x3D; 第i天，持有j股股票时的最大现金数</p><p><strong>状态转移</strong>：</p><p>每一天的操作有三种：</p><ul><li><p>买: f(i,j) &#x3D; f(i-1, j-1) - a[i] </p></li><li><p>卖: f(i,j) &#x3D; f(i-1, j+1) + a[i] </p></li><li><p>不操作（不买不卖）:  f(i,j) &#x3D; f(i-1,j)</p></li></ul><p>买的前提是当日剩余现金 &gt;&#x3D; 当日价格</p><p>卖的前提是当日手中股票是&gt;&#x3D; 1</p><p><strong>最终答案</strong>：max( f(n, j) + j* a[n] ), j &#x3D; 0, 1, ……, n</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nums</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; nums[i];</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>, <span class="number">-1</span>));</span><br><span class="line">f[<span class="number">0</span>][<span class="number">0</span>] = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line">f[i][j] = f[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">if</span>(j+<span class="number">1</span> &lt;= i<span class="number">-1</span> &amp;&amp; f[i<span class="number">-1</span>][j+<span class="number">1</span>] != <span class="number">-1</span>) f[i][j] = <span class="built_in">max</span>(f[i][j], f[i<span class="number">-1</span>][j+<span class="number">1</span>] + nums[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span>(j<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp;  f[i<span class="number">-1</span>][j<span class="number">-1</span>] &gt;= nums[i<span class="number">-1</span>]) f[i][j] = <span class="built_in">max</span>(f[i][j], f[i<span class="number">-1</span>][j<span class="number">-1</span>] - nums[i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(f[n][j] != <span class="number">-1</span>) res = <span class="built_in">max</span>(res, f[n][j] + j*nums[n<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;长度为n的价格数组a，表示某只股票每天的价格， 每天最多买入或卖出该只股票的1手股票， 无手续费， 卖出前手中必须有股票， 持有股票数目不受</summary>
      
    
    
    
    <category term="算法" scheme="https://xielingfan.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="dp" scheme="https://xielingfan.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>字符串匹配——kmp算法</title>
    <link href="https://xielingfan.github.io/2022/04/26/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E2%80%94%E2%80%94kmp%E7%AE%97%E6%B3%95/"/>
    <id>https://xielingfan.github.io/2022/04/26/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E2%80%94%E2%80%94kmp%E7%AE%97%E6%B3%95/</id>
    <published>2022-04-26T14:45:33.000Z</published>
    <updated>2022-04-28T04:48:00.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>s是主串，p是模式串，n是s的长度，m是p的长度, 下标从1开始。 求p是否在s中出现，或者出现多少次。</p><h3 id="暴力做法"><a href="#暴力做法" class="headerlink" title="暴力做法"></a>暴力做法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i+j<span class="number">-1</span>] != p[j]) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="comment">// 匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴力匹配的思路：用模式串匹配主串的每一位，若从主串第i位开始匹配，匹配失败，则从主串第i+1位，模式串第1位重新匹配。</p><p>时间复杂度： 最坏O(n*m)</p><p>暴力做法的缺点：没有利用上次匹配失败时的有用信息，造成无用匹配。</p><h3 id="kmp算法思路"><a href="#kmp算法思路" class="headerlink" title="kmp算法思路"></a>kmp算法思路</h3><p>假设P从S的某处开始匹配， 绿色段为匹配成功的子串， 在红色处（i+1）匹配不成功。 蓝色部分是之后第一个成功的完整匹配</p><p>那么 由p1 &#x3D; s1、s1 &#x3D; p2可以推导出p1 &#x3D; p2， 即P[1,j]子串有相同的前后缀p1和p2。</p><p><img src="/../img/kmp.png" alt="kmp"></p><p>所以可以得到kmp算法的思路： 在知道p1&#x3D;p2的前提下， 在从绿色段开头k开始的这一轮匹配失败后，i可以不用回退到k+1，保持不变， j回退到p1子串的末尾即可， 因为通过上一轮失败匹配的信息可以得知s1 &#x3D; p2, 而 p1 &#x3D; p2, 所以s1 &#x3D; p1，可以直接从j+1开始继续匹配。</p><p>为了实现该算法，需要预处理出子串P(1,j) j &#x3D; 1,2,…,m 的最长相同前后缀长度， 即next数组。求“最长”相同前后缀是因为要防止j回退过多导致错过正确答案。</p><h3 id="如何求next数组"><a href="#如何求next数组" class="headerlink" title="如何求next数组"></a>如何求next数组</h3><p>求next数组的过程即P串从第二位开始与P串自身的匹配。匹配过程中，子串P(1,j) &#x3D; P’(1,j),   P’(1,j) &#x3D; P(i-j, i-1)， 得出P(1,j) &#x3D; P(i-j, i-1)， 即P(1,i-1)子串的最大相同前后缀长度为 j</p><p><img src="/../img/kmp2.png" alt="kmp2"></p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求模式串的Next数组：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ ) &#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;s是主串，p是模式串，n是s的长度，m是p的长度, 下标从1开始。 求p是否在s中出现，或者出现多少次。&lt;/p&gt;
&lt;h3 id=&quot;暴力做法&quot;</summary>
      
    
    
    
    
    <category term="kmp" scheme="https://xielingfan.github.io/tags/kmp/"/>
    
  </entry>
  
  <entry>
    <title>git基本操作</title>
    <link href="https://xielingfan.github.io/2022/04/26/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://xielingfan.github.io/2022/04/26/git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2022-04-26T04:06:28.000Z</published>
    <updated>2022-04-26T04:34:31.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置用户名、用户邮箱"><a href="#配置用户名、用户邮箱" class="headerlink" title="配置用户名、用户邮箱"></a>配置用户名、用户邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global [user.name](http://user.name/) <span class="string">&quot;Your Name&quot;</span>  </span><br><span class="line">git config --global [user.email](http://user.email/) <span class="string">&quot;email@[example.com](http://example.com/)&quot;</span></span><br></pre></td></tr></table></figure><h3 id="创建新目录并进入"><a href="#创建新目录并进入" class="headerlink" title="创建新目录并进入"></a>创建新目录并进入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> learngit</span><br><span class="line"><span class="built_in">cd</span> learngit</span><br></pre></td></tr></table></figure><h3 id="将目录变成Git可管理的仓库"><a href="#将目录变成Git可管理的仓库" class="headerlink" title="将目录变成Git可管理的仓库"></a>将目录变成Git可管理的仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="工作区-Working-Directory-amp-暂存区-stage-x2F-index-amp-仓库（Repository）"><a href="#工作区-Working-Directory-amp-暂存区-stage-x2F-index-amp-仓库（Repository）" class="headerlink" title="工作区(Working Directory)&amp;暂存区(stage&#x2F;index)&amp;仓库（Repository）"></a>工作区(Working Directory)&amp;暂存区(stage&#x2F;index)&amp;仓库（Repository）</h3><p>工作区-&gt;暂存区    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add test.txt</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p>暂存区-&gt;仓库     </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br></pre></td></tr></table></figure><p>查看工作区与暂存区差异 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>  查看暂存区与仓库差异    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><p>查看工作区与仓库差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>回退到上个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>回退到上上个版本    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^^</span><br></pre></td></tr></table></figure><p>回退到上一百个版本    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~100</span><br></pre></td></tr></table></figure><p>回退到某一版本 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard e5g1d(版本号前几位)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li><p>3个区都回退    –hard</p></li><li><p>只回退仓库，暂存区和工作区不会发生变化    –soft</p></li><li><p>默认方式，回退暂存区和仓库信息，工作区不会发生变化    –mixed</p></li></ul><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>撤销工作区的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git restore test.txt</span><br><span class="line">git checkout -- test.txt</span><br></pre></td></tr></table></figure><p>撤销暂存区的变化&#x2F;撤销git add</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged test.txt</span><br><span class="line">git reset  HEAD test.txt</span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>所有提交的版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>简略版日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br></pre></td></tr></table></figure><p>分支合并图、一行显示、提交校验码缩略显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline  --graph --abbrev-commit</span><br></pre></td></tr></table></figure><p>查看所有分支的操作记录（commit、reset），可用来恢复被删除版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog </span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>查看分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>创建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git switch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>创建+切换分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git switch -c dev</span><br><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><p>合并某分支到当前分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge dev#fast foward模式：删除分支后会丢掉分支信息</span><br><span class="line">git merge --no-ff -m &quot;message&quot; dev    #--no-ff 模式：会在merge时生成一个新的commit</span><br></pre></td></tr></table></figure><p>解决冲突，编辑文档解决冲突后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add + commit</span><br></pre></td></tr></table></figure><p>删除分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><p>强制删除分支（若要删除没有被合并过的分支）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D dev</span><br></pre></td></tr></table></figure><h3 id="应对突发情况，保存当前工作"><a href="#应对突发情况，保存当前工作" class="headerlink" title="应对突发情况，保存当前工作"></a>应对突发情况，保存当前工作</h3><p>保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>查看保存列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><p>应用某个存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><p>丢弃某个存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><p>应用并删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>删除所有stash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>添加自己的远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin url</span><br></pre></td></tr></table></figure><p>添加别人的远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream url</span><br></pre></td></tr></table></figure><p>删除远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin/upstream</span><br></pre></td></tr></table></figure><p>查看远程库信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master<span class="comment">#第一次</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete dev</span><br></pre></td></tr></table></figure><h3 id="从远程仓库克隆（只会克隆master）"><a href="#从远程仓库克隆（只会克隆master）" class="headerlink" title="从远程仓库克隆（只会克隆master）"></a>从远程仓库克隆（只会克隆master）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> SSH/HTTPS</span><br></pre></td></tr></table></figure><h3 id="创建远程仓库的dev分支到本地"><a href="#创建远程仓库的dev分支到本地" class="headerlink" title="创建远程仓库的dev分支到本地"></a>创建远程仓库的dev分支到本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git switch -c dev origin/dev</span><br></pre></td></tr></table></figure><h3 id="拉取远程仓库内容"><a href="#拉取远程仓库内容" class="headerlink" title="拉取远程仓库内容"></a>拉取远程仓库内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master<span class="comment">#只拉取，不合并    </span></span><br><span class="line">git pull origin master<span class="comment">#拉取（fetch）+合并（merge）  </span></span><br></pre></td></tr></table></figure><h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rebase upstream/master</span><br><span class="line">若有冲突，解决后  git add</span><br><span class="line">然后执行 git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h3 id="一些参数的解释"><a href="#一些参数的解释" class="headerlink" title="一些参数的解释"></a>一些参数的解释</h3><ul><li><p>-d    –delete：删除</p></li><li><p>-D    –delete –force的快捷键</p></li><li><p>-f      –force：强制</p></li><li><p>-m   –move：移动或重命名</p></li><li><p>-M    –move –force的快捷键</p></li><li><p>-r     –remote：远程</p></li><li><p>-a    –all:所有</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;配置用户名、用户邮箱&quot;&gt;&lt;a href=&quot;#配置用户名、用户邮箱&quot; class=&quot;headerlink&quot; title=&quot;配置用户名、用户邮箱&quot;&gt;&lt;/a&gt;配置用户名、用户邮箱&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
    <category term="git" scheme="https://xielingfan.github.io/tags/git/"/>
    
  </entry>
  
</feed>
